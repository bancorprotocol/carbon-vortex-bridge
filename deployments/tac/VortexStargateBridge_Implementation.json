{
  "address": "0xFe19CbA3aB1A189B7FC17cAa798Df64Ad2b54d4D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICarbonVortex",
          "name": "vortexInit",
          "type": "address"
        },
        {
          "internalType": "contract IStargate",
          "name": "stargateInit",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultInit",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientAmountReceived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientNativeTokenSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevSlippagePPM",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newSlippagePPM",
          "type": "uint32"
        }
      ],
      "name": "SlippagePPMUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensBridged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "Token",
          "name": "prevWithdrawToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "newWithdrawToken",
          "type": "address"
        }
      ],
      "name": "WithdrawTokenUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "withdrawTokenInit",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "slippagePPMInit",
          "type": "uint32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "checkVersion",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newSlippagePPM",
          "type": "uint32"
        }
      ],
      "name": "setSlippagePPM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "newWithdrawToken",
          "type": "address"
        }
      ],
      "name": "setWithdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippagePPM",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawToken",
      "outputs": [
        {
          "internalType": "Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8a823879b4e581ba2de7a6d3c3b9ffb521924e5a565473fc451545c43f8651b3",
  "receipt": {
    "to": null,
    "from": "0xe01EA58F6DA98488E4C92fD9b3E49607639C5370",
    "contractAddress": "0xFe19CbA3aB1A189B7FC17cAa798Df64Ad2b54d4D",
    "transactionIndex": 0,
    "gasUsed": "3059399",
    "logsBloom": "0x
    "blockHash": "0x1a03dfa902f5d6d968845a92ba1e4e9bd8c22751fe9595054d1bdf8aac953232",
    "transactionHash": "0x8a823879b4e581ba2de7a6d3c3b9ffb521924e5a565473fc451545c43f8651b3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4249462,
        "transactionHash": "0x8a823879b4e581ba2de7a6d3c3b9ffb521924e5a565473fc451545c43f8651b3",
        "address": "0xFe19CbA3aB1A189B7FC17cAa798Df64Ad2b54d4D",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x1a03dfa902f5d6d968845a92ba1e4e9bd8c22751fe9595054d1bdf8aac953232"
      }
    ],
    "blockNumber": 4249462,
    "cumulativeGasUsed": "3059399",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf7c7d7507041977aB0328CAf449f1e80085709a9",
    "0x61D66bC21fED820938021B06e9b2291f3FB91945",
    "0x60917e542aDdd13bfd1a7f81cD654758052dAdC4"
  ],
  "numDeployments": 1,
  "solcInputHash": "fafa5eb796ce853154560d110634d0f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICarbonVortex\",\"name\":\"vortexInit\",\"type\":\"address\"},{\"internalType\":\"contract IStargate\",\"name\":\"stargateInit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultInit\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientAmountReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientNativeTokenSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevSlippagePPM\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newSlippagePPM\",\"type\":\"uint32\"}],\"name\":\"SlippagePPMUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"prevWithdrawToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"newWithdrawToken\",\"type\":\"address\"}],\"name\":\"WithdrawTokenUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"withdrawTokenInit\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"slippagePPMInit\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"checkVersion\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newSlippagePPM\",\"type\":\"uint32\"}],\"name\":\"setSlippagePPM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"newWithdrawToken\",\"type\":\"address\"}],\"name\":\"setWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippagePPM\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"VortexStargateBridge contract\",\"events\":{\"FundsWithdrawn(address,address,address,uint256)\":{\"details\":\"triggered when tokens have been withdrawn from the carbon vortex bridge\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"SlippagePPMUpdated(uint32,uint32)\":{\"details\":\"emitted when the slippage (in units of PPM) is updated\"},\"TokensBridged(address,address,uint256)\":{\"details\":\"emitted when tokens are bridged successfully\"},\"WithdrawTokenUpdated(address,address)\":{\"details\":\"emitted when the withdraw token is updated\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"used to set immutable state variables and disable initialization of the implementation\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,uint32)\":{\"details\":\"initializes the contract\"},\"postUpgrade(bool,bytes)\":{\"details\":\"performs post-upgrade initialization requirements: - this must and can be called only once per-upgrade\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"roleAdmin()\":{\"details\":\"returns the admin role\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bridge(uint256)\":{\"notice\":\"function which bridges the target / final target tokens accumulated in the vortex to the mainnet vaultif amount == 0, the entire available balance is bridged\"},\"setSlippagePPM(uint32)\":{\"notice\":\"sets the maximum allowed bridge slippage (in units of PPM) requirements: - the caller must be the admin of the contract\"},\"setWithdrawToken(address)\":{\"notice\":\"sets the withdraw token requirements: - the caller must be the admin of the contract\"},\"slippagePPM()\":{\"notice\":\"returns the maximum allowed bridge slippage (in units of PPM)\"},\"version()\":{\"notice\":\"returns the version of the contract\"},\"withdrawFunds(address,address,uint256)\":{\"notice\":\"withdraws funds held by the contract and sends them to an accountnote that this is a safety mechanism, shouldn't be necessary in normal operation requirements: - the caller is admin of the contract\"},\"withdrawToken()\":{\"notice\":\"returns the configured withdraw token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/VortexStargateBridge.sol\":\"VortexStargateBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7d24c901e098a04fa7f388c9ff1890bb522307272a2fee8030ee15a8d907096f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/bridge/VortexBridgeBase.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport { PPM_RESOLUTION } from \\\"../utility/Utils.sol\\\";\\nimport { MathEx } from \\\"../utility/MathEx.sol\\\";\\nimport { Token } from \\\"../token/Token.sol\\\";\\nimport { Upgradeable } from \\\"../utility/Upgradeable.sol\\\";\\nimport { Utils } from \\\"../utility/Utils.sol\\\";\\n\\nimport { ICarbonVortex } from \\\"../interfaces/ICarbonVortex.sol\\\";\\n\\n/**\\n * @dev VortexBridgeBase abstract contract\\n */\\nabstract contract VortexBridgeBase is ReentrancyGuardUpgradeable, Utils, Upgradeable {\\n    using Address for address payable;\\n\\n    error InsufficientAmountReceived(uint256 amountReceived, uint256 minAmount);\\n    error InsufficientNativeTokenSent();\\n\\n    ICarbonVortex internal immutable _vortex; // vortex address\\n    address internal immutable _vault; // address to receive bridged tokens on mainnet\\n\\n    Token internal _withdrawToken; // target / final target token which is withdrawn from the vortex\\n    uint32 internal _slippagePPM; // bridge slippage ppm\\n\\n    /**\\n     * @dev emitted when tokens are bridged successfully\\n     */\\n    event TokensBridged(address indexed sender, Token indexed token, uint256 amount);\\n\\n    /**\\n     * @dev emitted when the withdraw token is updated\\n     */\\n    event WithdrawTokenUpdated(Token indexed prevWithdrawToken, Token indexed newWithdrawToken);\\n\\n    /**\\n     * @dev emitted when the slippage (in units of PPM) is updated\\n     */\\n    event SlippagePPMUpdated(uint32 prevSlippagePPM, uint32 newSlippagePPM);\\n\\n    /**\\n     * @dev triggered when tokens have been withdrawn from the carbon vortex bridge\\n     */\\n    event FundsWithdrawn(Token indexed token, address indexed caller, address indexed target, uint256 amount);\\n\\n    /**\\n     * @dev used to set immutable state variables\\n     */\\n    constructor(ICarbonVortex vortexInit, address vaultInit) validAddress(address(vortexInit)) validAddress(vaultInit) {\\n        _vortex = vortexInit;\\n        _vault = vaultInit;\\n    }\\n\\n    /**\\n     * @dev initializes the contract\\n     */\\n    function initialize(Token withdrawTokenInit, uint32 slippagePPMInit) external virtual initializer {\\n        __VortexBridgeBase_init(withdrawTokenInit, slippagePPMInit);\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __VortexBridgeBase_init(Token withdrawTokenInit, uint32 slippagePPMInit) internal onlyInitializing {\\n        __Upgradeable_init();\\n\\n        __VortexBridgeBase_init_unchained(withdrawTokenInit, slippagePPMInit);\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __VortexBridgeBase_init_unchained(\\n        Token withdrawTokenInit,\\n        uint32 slippagePPMInit\\n    ) internal onlyInitializing {\\n        _withdrawToken = withdrawTokenInit;\\n        _slippagePPM = slippagePPMInit;\\n    }\\n\\n    /**\\n     * @notice function which bridges the target / final target tokens accumulated in the vortex to the mainnet vault\\n     * @notice if amount == 0, the entire available balance is bridged\\n     */\\n    function bridge(uint256 amount) external payable virtual returns (uint256) {}\\n\\n    /**\\n     * @dev withdraws *amount* of _withdrawToken from the vortex to this contract\\n     * @dev if amount == 0, the entire available balance is withdrawn\\n     */\\n    function _withdrawVortex(uint256 amount) internal virtual returns (uint256) {\\n        uint256 withdrawBalance = _withdrawToken.balanceOf(address(_vortex));\\n        if (withdrawBalance == 0) {\\n            return 0;\\n        }\\n        // if amount is greater than the available balance or is 0, set amount to the available balance\\n        if (amount > withdrawBalance || amount == 0) {\\n            amount = withdrawBalance;\\n        }\\n        Token[] memory tokens = new Token[](1);\\n        tokens[0] = _withdrawToken;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = amount;\\n\\n        // withdraw the token from the vortex\\n        _vortex.withdrawFunds(tokens, payable(address(this)), amounts);\\n\\n        return amount;\\n    }\\n    /**\\n     * @notice returns the configured withdraw token\\n     */\\n    function withdrawToken() external view returns (Token) {\\n        return _withdrawToken;\\n    }\\n\\n    /**\\n     * @notice sets the withdraw token\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function setWithdrawToken(\\n        Token newWithdrawToken\\n    ) external virtual onlyAdmin validAddress(Token.unwrap(newWithdrawToken)) {\\n        _setWithdrawToken(newWithdrawToken);\\n    }\\n\\n    /**\\n     * @dev sets the withdraw token\\n     */\\n    function _setWithdrawToken(Token newWithdrawToken) internal {\\n        Token prevWithdrawToken = _withdrawToken;\\n        if (prevWithdrawToken == newWithdrawToken) {\\n            return;\\n        }\\n\\n        _withdrawToken = newWithdrawToken;\\n\\n        emit WithdrawTokenUpdated({ prevWithdrawToken: prevWithdrawToken, newWithdrawToken: newWithdrawToken });\\n    }\\n\\n    /**\\n     * @notice returns the maximum allowed bridge slippage (in units of PPM)\\n     */\\n    function slippagePPM() external view returns (uint32) {\\n        return _slippagePPM;\\n    }\\n\\n    /**\\n     * @notice sets the maximum allowed bridge slippage (in units of PPM)\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function setSlippagePPM(uint32 newSlippagePPM) external onlyAdmin validSlippage(newSlippagePPM) {\\n        _setSlippagePPM(newSlippagePPM);\\n    }\\n\\n    /**\\n     * @dev sets the slippage (in units of PPM)\\n     */\\n    function _setSlippagePPM(uint32 newSlippagePPM) internal {\\n        uint32 prevSlippagePPM = _slippagePPM;\\n        if (prevSlippagePPM == newSlippagePPM) {\\n            return;\\n        }\\n\\n        _slippagePPM = newSlippagePPM;\\n\\n        emit SlippagePPMUpdated({ prevSlippagePPM: prevSlippagePPM, newSlippagePPM: newSlippagePPM });\\n    }\\n\\n    /**\\n     * @notice withdraws funds held by the contract and sends them to an account\\n     * @notice note that this is a safety mechanism, shouldn't be necessary in normal operation\\n     *\\n     * requirements:\\n     *\\n     * - the caller is admin of the contract\\n     */\\n    function withdrawFunds(\\n        Token token,\\n        address payable target,\\n        uint256 amount\\n    ) external validAddress(target) onlyAdmin nonReentrant {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        // forwards all available gas in case of ETH\\n        token.unsafeTransfer(target, amount);\\n\\n        emit FundsWithdrawn({ token: token, caller: msg.sender, target: target, amount: amount });\\n    }\\n\\n    /**\\n     * @dev set platform allowance to 2 ** 256 - 1 if it's less than the input amount\\n     */\\n    function _setPlatformAllowance(Token token, address platform, uint256 inputAmount) internal {\\n        if (token.isNative()) {\\n            return;\\n        }\\n        uint256 allowance = token.toIERC20().allowance(address(this), platform);\\n        if (allowance < inputAmount) {\\n            // increase allowance to the max amount if allowance < inputAmount\\n            token.forceApprove(platform, type(uint256).max);\\n        }\\n    }\\n\\n    function _estimateMinAmountToReceive(uint256 amount) internal view returns (uint256) {\\n        return amount - MathEx.mulDivF(amount, _slippagePPM, PPM_RESOLUTION);\\n    }\\n\\n    /**\\n     * @dev validates that the amount received is greater than the minimum amount expected\\n     */\\n    function _validateAmountReceived(uint256 amountReceived, uint256 minAmount) internal pure {\\n        if (amountReceived < minAmount) {\\n            revert InsufficientAmountReceived({ amountReceived: amountReceived, minAmount: minAmount });\\n        }\\n    }\\n\\n    /**\\n     * @dev validates that the native token sent is sufficient\\n     */\\n    function _validateSufficientNativeTokenSent(uint256 txValue, uint256 requiredValue) internal pure {\\n        if (txValue < requiredValue) {\\n            revert InsufficientNativeTokenSent();\\n        }\\n    }\\n\\n    /**\\n     * @dev refund excess native token sent\\n     */\\n    function _refundExcessNativeTokenSent(address sender, uint256 txValue, uint256 requiredValue) internal {\\n        if (txValue > requiredValue) {\\n            // refund excess native token sent\\n            payable(sender).sendValue(txValue - requiredValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e912d1496c19406da6d68d54155ee8ee003e798e3f8c10435ca9bd5d3922914\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/bridge/VortexStargateBridge.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\nimport { SendParam, MessagingFee, OFTReceipt } from \\\"../vendor/interfaces/IOFT.sol\\\";\\n\\nimport { IStargate } from \\\"../vendor/interfaces/IStargate.sol\\\";\\nimport { Upgradeable } from \\\"../utility/Upgradeable.sol\\\";\\n\\nimport { ICarbonVortex } from \\\"../interfaces/ICarbonVortex.sol\\\";\\nimport { VortexBridgeBase } from \\\"./VortexBridgeBase.sol\\\";\\n\\n/**\\n * @dev VortexStargateBridge contract\\n */\\ncontract VortexStargateBridge is VortexBridgeBase {\\n    // stargate v2 mainnet destination endpoint id\\n    uint32 private constant DESTINATION_ENDPOINT_ID = 30101;\\n\\n    IStargate private immutable _stargate; // stargate v2 bridge pool or oft\\n\\n    /**\\n     * @dev used to set immutable state variables and disable initialization of the implementation\\n     */\\n    constructor(\\n        ICarbonVortex vortexInit,\\n        IStargate stargateInit,\\n        address vaultInit\\n    ) validAddress(address(stargateInit)) VortexBridgeBase(vortexInit, vaultInit) {\\n        _stargate = stargateInit;\\n\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev authorize the contract to receive the native token\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @inheritdoc Upgradeable\\n     */\\n    function version() public pure override(Upgradeable) returns (uint16) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice function which bridges the target / final target tokens accumulated in the vortex to the mainnet vault\\n     * @notice if amount == 0, the entire available balance is bridged\\n     */\\n    function bridge(uint256 amount) external payable override nonReentrant returns (uint256) {\\n        // withdraw funds from vortex\\n        amount = _withdrawVortex(amount);\\n        // if amount == 0, there is no balance in the vortex\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        // min amount to receive\\n        uint256 minAmount = _estimateMinAmountToReceive(amount);\\n\\n        // generate oft send param message\\n        SendParam memory sendParam = SendParam({\\n            dstEid: DESTINATION_ENDPOINT_ID, // mainnet destination endpoint id\\n            to: _addressToBytes32(_vault), // vault address on mainnet\\n            amountLD: amount, // amount to send\\n            minAmountLD: minAmount, // min amount to send\\n            extraOptions: bytes(\\\"\\\"),\\n            composeMsg: bytes(\\\"\\\"),\\n            oftCmd: bytes(\\\"\\\") // taxi mode (direct transfer)\\n        });\\n\\n        // get amount received quote\\n        (, , OFTReceipt memory receipt) = _stargate.quoteOFT(sendParam);\\n        uint256 amountReceived = receipt.amountReceivedLD;\\n\\n        // validate sufficient amount received\\n        _validateAmountReceived(amountReceived, minAmount);\\n\\n        // get the messaging fee for the bridge transaction\\n        MessagingFee memory messagingFee = _stargate.quoteSend(sendParam, false);\\n        // calculate the value to send with the tx\\n        uint256 valueToSend = messagingFee.nativeFee;\\n\\n        // validate sufficient native token sent\\n        _validateSufficientNativeTokenSent(msg.value, valueToSend);\\n\\n        // add the amount to send to the bridge if the token is native\\n        if (_stargate.token() == address(0x0)) {\\n            valueToSend += sendParam.amountLD;\\n        }\\n\\n        // approve token if not approved\\n        _setPlatformAllowance(_withdrawToken, address(_stargate), sendParam.amountLD);\\n\\n        // bridge the token to the mainnet vault\\n        (, receipt, ) = _stargate.sendToken{ value: valueToSend }(sendParam, messagingFee, msg.sender);\\n\\n        // refund user if excess native token sent\\n        _refundExcessNativeTokenSent(msg.sender, msg.value, messagingFee.nativeFee);\\n\\n        emit TokensBridged(msg.sender, _withdrawToken, amount);\\n\\n        return receipt.amountReceivedLD;\\n    }\\n\\n    /**\\n     * @dev converts an address to bytes32\\n     */\\n    function _addressToBytes32(address _addr) private pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n}\\n\",\"keccak256\":\"0xdb50aa71d7b44f5cf210ee2b513e9132faae1e60b1b21b0c2ab892c1e338f994\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/ICarbonVortex.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\nimport { Token } from \\\"../token/Token.sol\\\";\\n\\n/**\\n * @notice CarbonVortex interface\\n */\\ninterface ICarbonVortex {\\n    /**\\n     * @dev withdraws funds held by the contract and sends them to an account\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function withdrawFunds(Token[] calldata tokens, address payable target, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x1f15a7f8b95e8d2e2cccfd874fd8123cd07ed6a6bb800e77ccdcf78078713cb4\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/Token.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @dev This type implements ERC20 and SafeERC20 utilities for both the native token and for ERC20 tokens\\n */\\ntype Token is address;\\nusing SafeERC20 for IERC20;\\nusing Address for address payable;\\n\\n// the address that represents the native token reserve\\naddress constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n// the symbol that represents the native token\\nstring constant NATIVE_TOKEN_SYMBOL = \\\"ETH\\\";\\n\\n// the decimals for the native token\\nuint8 constant NATIVE_TOKEN_DECIMALS = 18;\\n\\n// the token representing the native token\\nToken constant NATIVE_TOKEN = Token.wrap(NATIVE_TOKEN_ADDRESS);\\n\\nusing {\\n    equal as ==,\\n    notEqual as !=,\\n    isNative,\\n    symbol,\\n    decimals,\\n    balanceOf,\\n    allowance,\\n    safeTransfer,\\n    safeTransferFrom,\\n    forceApprove,\\n    safeIncreaseAllowance,\\n    unsafeTransfer,\\n    toIERC20\\n} for Token global;\\n\\n/* solhint-disable func-visibility */\\n\\nfunction equal(Token a, Token b) pure returns (bool) {\\n    return Token.unwrap(a) == Token.unwrap(b);\\n}\\n\\nfunction notEqual(Token a, Token b) pure returns (bool) {\\n    return Token.unwrap(a) != Token.unwrap(b);\\n}\\n\\n/**\\n * @dev returns whether the provided token represents an ERC20 or the native token reserve\\n */\\nfunction isNative(Token token) pure returns (bool) {\\n    return token == NATIVE_TOKEN;\\n}\\n\\n/**\\n * @dev returns the symbol of the native token/ERC20 token\\n */\\nfunction symbol(Token token) view returns (string memory) {\\n    if (isNative(token)) {\\n        return NATIVE_TOKEN_SYMBOL;\\n    }\\n    return toERC20(token).symbol();\\n}\\n\\n/**\\n * @dev returns the decimals of the native token/ERC20 token\\n */\\nfunction decimals(Token token) view returns (uint8) {\\n    if (isNative(token)) {\\n        return NATIVE_TOKEN_DECIMALS;\\n    }\\n    return toERC20(token).decimals();\\n}\\n\\n/**\\n * @dev returns the balance of the native token/ERC20 token\\n */\\nfunction balanceOf(Token token, address account) view returns (uint256) {\\n    if (isNative(token)) {\\n        return account.balance;\\n    }\\n    return toIERC20(token).balanceOf(account);\\n}\\n\\n/**\\n * @dev returns the allowance of an `owner` to a `spender`\\n */\\nfunction allowance(Token token, address owner, address spender) view returns (uint256) {\\n    if (isNative(token)) {\\n        return 0;\\n    }\\n    return toIERC20(token).allowance(owner, spender);\\n}\\n\\n/**\\n * @dev transfers a specific amount of the native token/ERC20 token\\n */\\nfunction safeTransfer(Token token, address to, uint256 amount) {\\n    if (amount == 0) {\\n        return;\\n    }\\n    if (isNative(token)) {\\n        payable(to).transfer(amount);\\n    } else {\\n        toIERC20(token).safeTransfer(to, amount);\\n    }\\n}\\n\\n/**\\n * @dev transfers a specific amount of the native token/ERC20 token from a specific holder using the allowance mechanism\\n *\\n * note that the function does not perform any action if the native token is provided\\n */\\nfunction safeTransferFrom(Token token, address from, address to, uint256 amount) {\\n    if (amount == 0 || isNative(token)) {\\n        return;\\n    }\\n    toIERC20(token).safeTransferFrom(from, to, amount);\\n}\\n\\n/**\\n * @dev force approves a specific amount of the native token/ERC20 token from a specific holder\\n *\\n * note that the function does not perform any action if the native token is provided\\n */\\nfunction forceApprove(Token token, address spender, uint256 amount) {\\n    if (isNative(token)) {\\n        return;\\n    }\\n\\n    toIERC20(token).forceApprove(spender, amount);\\n}\\n\\n/**\\n * @dev atomically increases the allowance granted to `spender` by the caller.\\n *\\n * note that the function does not perform any action if the native token is provided\\n */\\nfunction safeIncreaseAllowance(Token token, address spender, uint256 amount) {\\n    if (isNative(token)) {\\n        return;\\n    }\\n    toIERC20(token).safeIncreaseAllowance(spender, amount);\\n}\\n\\n/**\\n * @dev transfers a specific amount of the native token/ERC20 token\\n * @dev forwards all available gas if sending native token\\n */\\nfunction unsafeTransfer(Token token, address to, uint256 amount) {\\n    if (amount == 0) {\\n        return;\\n    }\\n\\n    if (isNative(token)) {\\n        payable(to).sendValue(amount);\\n    } else {\\n        toIERC20(token).safeTransfer(to, amount);\\n    }\\n}\\n\\n/**\\n * @dev utility function that converts a token to an IERC20\\n */\\nfunction toIERC20(Token token) pure returns (IERC20) {\\n    return IERC20(Token.unwrap(token));\\n}\\n\\n/**\\n * @dev utility function that converts a token to an ERC20\\n */\\nfunction toERC20(Token token) pure returns (ERC20) {\\n    return ERC20(Token.unwrap(token));\\n}\\n\\n/* solhint-disable func-visibility */\\n\",\"keccak256\":\"0xc6f83bfc92ed110046beccd6c81a59cbc6f6ea0727c9ecd00d287ce16978e190\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\nuint32 constant PPM_RESOLUTION = 1_000_000;\\n\\nuint32 constant MAX_SLIPPAGE_PPM = 800_000; // 80%\\n\\nuint32 constant MAX_GAP = 50;\\n\",\"keccak256\":\"0x996f079da756280bdde240b268d75ef64cdb1c17df468e040d627ddafd31000c\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/MathEx.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev this library provides a set of complex math operations\\n */\\nlibrary MathEx {\\n    error Overflow();\\n\\n    /**\\n     * @dev returns the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(uint256 x, uint256 y, uint256 z) internal pure returns (uint256) {\\n        // safe because no `+` or `-` or `*`\\n        unchecked {\\n            (uint256 xyhi, uint256 xylo) = _mul512(x, y);\\n\\n            // if `x * y < 2 ^ 256`\\n            if (xyhi == 0) {\\n                return xylo / z;\\n            }\\n\\n            // assert `x * y / z < 2 ^ 256`\\n            if (xyhi >= z) {\\n                revert Overflow();\\n            }\\n\\n            uint256 m = _mulMod(x, y, z); // `m = x * y % z`\\n            (uint256 nhi, uint256 nlo) = _sub512(xyhi, xylo, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n\\n            // if `n < 2 ^ 256`\\n            if (nhi == 0) {\\n                return nlo / z;\\n            }\\n\\n            uint256 p = _unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n            uint256 q = _div512(nhi, nlo, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n            uint256 r = _inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n            return _unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(uint256 x, uint256 y, uint256 z) internal pure returns (uint256) {\\n        uint256 w = mulDivF(x, y, z);\\n        if (_mulMod(x, y, z) > 0) {\\n            if (w >= type(uint256).max) {\\n                revert Overflow();\\n            }\\n            unchecked {\\n                // safe because `w < type(uint256).max`\\n                return w + 1;\\n            }\\n        }\\n        return w;\\n    }\\n\\n    /**\\n     * @dev returns the smallest integer `z` such that `x * y / z <= 2 ^ 256 - 1`\\n     */\\n    function minFactor(uint256 x, uint256 y) internal pure returns (uint256) {\\n        (uint256 hi, uint256 lo) = _mul512(x, y);\\n        unchecked {\\n            // safe because:\\n            // - if `x < 2 ^ 256 - 1` or `y < 2 ^ 256 - 1`\\n            //   then `hi < 2 ^ 256 - 2`\\n            //   hence neither `hi + 1` nor `hi + 2` overflows\\n            // - if `x = 2 ^ 256 - 1` and `y = 2 ^ 256 - 1`\\n            //   then `hi = 2 ^ 256 - 2 = ~lo`\\n            //   hence `hi + 1`, which does not overflow, is computed\\n            return hi > ~lo ? hi + 2 : hi + 1;\\n        }\\n\\n        /* reasoning:\\n        |\\n        |   general:\\n        |   - find the smallest integer `z` such that `x * y / z <= 2 ^ 256 - 1`\\n        |   - the value of `x * y` is represented via `2 ^ 256 * hi + lo`\\n        |   - the expression `~lo` is equivalent to `2 ^ 256 - 1 - lo`\\n        |   \\n        |   symbols:\\n        |   - let `H` denote `hi`\\n        |   - let `L` denote `lo`\\n        |   - let `N` denote `2 ^ 256 - 1`\\n        |   \\n        |   inference:\\n        |   `x * y / z <= 2 ^ 256 - 1`     <-->\\n        |   `x * y / (2 ^ 256 - 1) <= z`   <-->\\n        |   `((N + 1) * H + L) / N <= z`   <-->\\n        |   `(N * H + H + L) / N <= z`     <-->\\n        |   `H + (H + L) / N <= z`\\n        |   \\n        |   inference:\\n        |   `0 <= H <= N && 0 <= L <= N`   <-->\\n        |   `0 <= H + L <= N + N`          <-->\\n        |   `0 <= H + L <= N * 2`          <-->\\n        |   `0 <= (H + L) / N <= 2`\\n        |   \\n        |   inference:\\n        |   - `0 = (H + L) / N` --> `H + L = 0` --> `x * y = 0` --> `z = 1 = H + 1`\\n        |   - `0 < (H + L) / N <= 1` --> `H + (H + L) / N <= H + 1` --> `z = H + 1`\\n        |   - `1 < (H + L) / N <= 2` --> `H + (H + L) / N <= H + 2` --> `z = H + 2`\\n        |   \\n        |   implementation:\\n        |   - if `hi > ~lo`:\\n        |     `~L < H <= N`                         <-->\\n        |     `N - L < H <= N`                      <-->\\n        |     `N < H + L <= N + L`                  <-->\\n        |     `1 < (H + L) / N <= 2`                <-->\\n        |     `H + 1 < H + (H + L) / N <= H + 2`    <-->\\n        |     `z = H + 2`\\n        |   - if `hi <= ~lo`:\\n        |     `H <= ~L`                             <-->\\n        |     `H <= N - L`                          <-->\\n        |     `H + L <= N`                          <-->\\n        |     `(H + L) / N <= 1`                    <-->\\n        |     `H + (H + L) / N <= H + 1`            <-->\\n        |     `z = H + 1`\\n        |\\n        */\\n    }\\n\\n    /**\\n     * @dev returns the value of `x * y`\\n     */\\n    function _mul512(uint256 x, uint256 y) private pure returns (uint256, uint256) {\\n        uint256 p = _mulModMax(x, y);\\n        uint256 q = _unsafeMul(x, y);\\n        if (p >= q) {\\n            unchecked {\\n                // safe because `p >= q`\\n                return (p - q, q);\\n            }\\n        }\\n        unchecked {\\n            // safe because `p < q` hence `_unsafeSub(p, q) > 0`\\n            return (_unsafeSub(p, q) - 1, q);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the value of `x - y`\\n     */\\n    function _sub512(uint256 xhi, uint256 xlo, uint256 y) private pure returns (uint256, uint256) {\\n        if (xlo >= y) {\\n            unchecked {\\n                // safe because `xlo >= y`\\n                return (xhi, xlo - y);\\n            }\\n        }\\n        return (xhi - 1, _unsafeSub(xlo, y));\\n    }\\n\\n    /**\\n     * @dev returns the value of `x / pow2n`, given that `x` is divisible by `pow2n`\\n     */\\n    function _div512(uint256 xhi, uint256 xlo, uint256 pow2n) private pure returns (uint256) {\\n        // safe because no `+` or `-` or `*`\\n        unchecked {\\n            uint256 pow2nInv = _unsafeAdd(_unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n            return _unsafeMul(xhi, pow2nInv) | (xlo / pow2n); // `(xhi << (256 - n)) | (xlo >> n)`\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the inverse of `d` modulo `2 ^ 256`, given that `d` is congruent to `1` modulo `2`\\n     */\\n    function _inv256(uint256 d) private pure returns (uint256) {\\n        // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n        uint256 x = 1;\\n        unchecked {\\n            // safe because `i < 8`\\n            for (uint256 i = 0; i < 8; i++) {\\n                x = _unsafeMul(x, _unsafeSub(2, _unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n            }\\n        }\\n        return x;\\n    }\\n\\n    /**\\n     * @dev returns `(x + y) % 2 ^ 256`\\n     */\\n    function _unsafeAdd(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x + y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x - y) % 2 ^ 256`\\n     */\\n    function _unsafeSub(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x - y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x * y) % 2 ^ 256`\\n     */\\n    function _unsafeMul(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x * y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `x * y % (2 ^ 256 - 1)`\\n     */\\n    function _mulModMax(uint256 x, uint256 y) private pure returns (uint256) {\\n        return mulmod(x, y, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev returns `x * y % z`\\n     */\\n    function _mulMod(uint256 x, uint256 y, uint256 z) private pure returns (uint256) {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x742a894ca3544057f41b1ca886f4459721f208c55ba44de7334099c8c57f15ea\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\nimport { AccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport { IUpgradeable } from \\\"./interfaces/IUpgradeable.sol\\\";\\n\\nimport { AccessDenied } from \\\"./Utils.sol\\\";\\n\\nimport { MAX_GAP } from \\\"./Constants.sol\\\";\\n\\n/**\\n * @dev this contract provides common utilities for upgradeable contracts\\n *\\n * note that we're using the Transparent Upgradeable Proxy pattern and *not* the Universal Upgradeable Proxy Standard\\n * (UUPS) pattern, therefore initializing the implementation contracts is not necessary or required\\n */\\nabstract contract Upgradeable is IUpgradeable, AccessControlEnumerableUpgradeable {\\n    error AlreadyInitialized();\\n\\n    // the admin role is used to allow a non-proxy admin to perform additional initialization/setup during contract\\n    // upgrades\\n    bytes32 internal constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\n\\n    uint16 internal _initializations;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 1] private __gap;\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __Upgradeable_init() internal onlyInitializing {\\n        __AccessControl_init();\\n\\n        __Upgradeable_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __Upgradeable_init_unchained() internal onlyInitializing {\\n        _initializations = version();\\n\\n        // set up administrative roles\\n        _setRoleAdmin(ROLE_ADMIN, ROLE_ADMIN);\\n\\n        // allow the deployer to initially be the admin of the contract\\n        _setupRole(ROLE_ADMIN, msg.sender);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    modifier onlyAdmin() {\\n        _hasRole(ROLE_ADMIN, msg.sender);\\n\\n        _;\\n    }\\n\\n    modifier onlyRoleMember(bytes32 role) {\\n        _hasRole(role, msg.sender);\\n\\n        _;\\n    }\\n\\n    function version() public view virtual override returns (uint16);\\n\\n    /**\\n     * @dev returns the admin role\\n     */\\n    function roleAdmin() external pure returns (bytes32) {\\n        return ROLE_ADMIN;\\n    }\\n\\n    /**\\n     * @dev performs post-upgrade initialization\\n     *\\n     * requirements:\\n     *\\n     * - this must and can be called only once per-upgrade\\n     */\\n    function postUpgrade(bool checkVersion, bytes calldata data) external {\\n        uint16 initializations = _initializations + 1;\\n        uint16 _version = version();\\n        if (checkVersion && initializations != _version) {\\n            revert AlreadyInitialized();\\n        } else if (!checkVersion) {\\n            initializations = _version;\\n        }\\n\\n        _initializations = initializations;\\n\\n        _postUpgrade(data);\\n    }\\n\\n    /**\\n     * @dev an optional post-upgrade callback that can be implemented by child contracts\\n     */\\n    function _postUpgrade(bytes calldata /* data */) internal virtual {}\\n\\n    function _hasRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51a93a5b7f213049503a865250848012d2e4f76c359559c00b6abd5314b1908e\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\nimport { PPM_RESOLUTION, MAX_SLIPPAGE_PPM } from \\\"./Constants.sol\\\";\\n\\nerror AccessDenied();\\nerror InvalidAddress();\\nerror InvalidFee();\\nerror InvalidSlippage();\\nerror ZeroValue();\\n\\n/**\\n * @dev common utilities\\n */\\nabstract contract Utils {\\n    // allows execution by the caller only\\n    modifier only(address caller) {\\n        _only(caller);\\n\\n        _;\\n    }\\n\\n    function _only(address caller) internal view {\\n        if (msg.sender != caller) {\\n            revert AccessDenied();\\n        }\\n    }\\n\\n    // verifies that a value is greater than zero\\n    modifier greaterThanZero(uint256 value) {\\n        _greaterThanZero(value);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _greaterThanZero(uint256 value) internal pure {\\n        if (value == 0) {\\n            revert ZeroValue();\\n        }\\n    }\\n\\n    // validates an address - currently only checks that it isn't null\\n    modifier validAddress(address addr) {\\n        _validAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validAddress(address addr) internal pure {\\n        if (addr == address(0)) {\\n            revert InvalidAddress();\\n        }\\n    }\\n\\n    // ensures that the fee is valid\\n    modifier validFee(uint32 fee) {\\n        _validFee(fee);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validFee(uint32 fee) internal pure {\\n        if (fee > PPM_RESOLUTION) {\\n            revert InvalidFee();\\n        }\\n    }\\n\\n    // ensures that the slippage is valid\\n    modifier validSlippage(uint32 slippage) {\\n        _validSlippage(slippage);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validSlippage(uint32 slippage) internal pure {\\n        if (slippage > MAX_SLIPPAGE_PPM) {\\n            revert InvalidSlippage();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f13f350755d90551806f5faa40fa6faf3608ad5e6651424bbe5797e1dc16b11\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.0;\\n\\nimport { IVersioned } from \\\"./IVersioned.sol\\\";\\n\\nimport { IAccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @dev this is the common interface for upgradeable contracts\\n */\\ninterface IUpgradeable is IAccessControlEnumerableUpgradeable, IVersioned {\\n\\n}\\n\",\"keccak256\":\"0xcc42138a568e5b5e6e1b96402d351ea04627e03bf24c0b62439910d3fda2773c\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev an interface for a versioned contract\\n */\\ninterface IVersioned {\\n    /**\\n     * @notice returns the version of the contract\\n     */\\n    function version() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xd06db6b0a0912eb27511ac440a91892c9c700ba5c61e2b51181849be7a47a496\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vendor/interfaces/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/// @dev contract added due to solidity version incompatibilities\\n\\n/**\\n * @dev taken from @layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol (3.0.49)\\n */\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\n/**\\n * @dev taken from @layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol (3.0.49)\\n */\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\n/// @dev taken from @layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol (3.0.49)\\n\\n/**\\n * @dev Struct representing token parameters for the OFT send() operation.\\n */\\nstruct SendParam {\\n    uint32 dstEid; // Destination endpoint ID.\\n    bytes32 to; // Recipient address.\\n    uint256 amountLD; // Amount to send in local decimals.\\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\\n    bytes composeMsg; // The composed message for the send() operation.\\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\\n}\\n\\n/**\\n * @dev Struct representing OFT limit information.\\n * @dev These amounts can change dynamically and are up the the specific oft implementation.\\n */\\nstruct OFTLimit {\\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\\n}\\n\\n/**\\n * @dev Struct representing OFT receipt information.\\n */\\nstruct OFTReceipt {\\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\\n}\\n\\n/**\\n * @dev Struct representing OFT fee details.\\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\\n */\\nstruct OFTFeeDetail {\\n    int256 feeAmountLD; // Amount of the fee in local decimals.\\n    string description; // Description of the fee.\\n}\\n\\n/**\\n * @title IOFT\\n * @dev Interface for the OftChain (OFT) token.\\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\\n * @dev This specific interface ID is '0x02e49c2c'.\\n */\\ninterface IOFT {\\n    // Custom error messages\\n    error InvalidLocalDecimals();\\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\\n\\n    // Events\\n    event OFTSent(\\n        bytes32 indexed guid, // GUID of the OFT message.\\n        uint32 dstEid, // Destination Endpoint ID.\\n        address indexed fromAddress, // Address of the sender on the src chain.\\n        uint256 amountSentLD, // Amount of tokens sent in local decimals.\\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\\n    );\\n    event OFTReceived(\\n        bytes32 indexed guid, // GUID of the OFT message.\\n        uint32 srcEid, // Source Endpoint ID.\\n        address indexed toAddress, // Address of the recipient on the dst chain.\\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\\n    );\\n\\n    /**\\n     * @notice Retrieves interfaceID and the version of the OFT.\\n     * @return interfaceId The interface ID.\\n     * @return version The version.\\n     *\\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\\n     */\\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\\n\\n    /**\\n     * @notice Retrieves the address of the token associated with the OFT.\\n     * @return token The address of the ERC20 token implementation.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\\n     * @return requiresApproval Needs approval of the underlying token implementation.\\n     *\\n     * @dev Allows things like wallet implementers to determine integration requirements,\\n     * without understanding the underlying token implementation.\\n     */\\n    function approvalRequired() external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the shared decimals of the OFT.\\n     * @return sharedDecimals The shared decimals of the OFT.\\n     */\\n    function sharedDecimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Provides a quote for OFT-related operations.\\n     * @param _sendParam The parameters for the send operation.\\n     * @return limit The OFT limit information.\\n     * @return oftFeeDetails The details of OFT fees.\\n     * @return receipt The OFT receipt information.\\n     */\\n    function quoteOFT(\\n        SendParam calldata _sendParam\\n    ) external view returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\\n\\n    /**\\n     * @notice Provides a quote for the send() operation.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\\n     *\\n     * @dev MessagingFee: LayerZero msg fee\\n     *  - nativeFee: The native fee.\\n     *  - lzTokenFee: The lzToken fee.\\n     */\\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\\n\\n    /**\\n     * @notice Executes the send() operation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @param _fee The fee information supplied by the caller.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\\n     * @return receipt The LayerZero messaging receipt from the send() operation.\\n     * @return oftReceipt The OFT receipt information.\\n     *\\n     * @dev MessagingReceipt: LayerZero msg receipt\\n     *  - guid: The unique identifier for the sent message.\\n     *  - nonce: The nonce of the sent message.\\n     *  - fee: The LayerZero fee incurred for the message.\\n     */\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\\n}\\n\",\"keccak256\":\"0x8b1961ab838eb1ef9bac10b07d0c833cc139a658ed715d7d29365ca0b33b1520\",\"license\":\"MIT\"},\"contracts/vendor/interfaces/IStargate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// solhint-disable-next-line max-line-length\\nimport { IOFT, SendParam, MessagingFee, MessagingReceipt, OFTReceipt } from \\\"./IOFT.sol\\\";\\n\\n/// @notice Stargate implementation type.\\nenum StargateType {\\n    Pool,\\n    OFT\\n}\\n\\n/// @notice Ticket data for bus ride.\\nstruct Ticket {\\n    uint72 ticketId;\\n    bytes passengerBytes;\\n}\\n\\n/// @title Interface for Stargate.\\n/// @notice Defines an API for sending tokens to destination chains.\\ninterface IStargate is IOFT {\\n    /// @dev This function is same as `send` in OFT interface but returns the ticket data if in the bus ride mode,\\n    /// which allows the caller to ride and drive the bus in the same transaction.\\n    function sendToken(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt, Ticket memory ticket);\\n\\n    /// @notice Returns the Stargate implementation type.\\n    function stargateType() external pure returns (StargateType);\\n}\\n\",\"keccak256\":\"0xadfcefb6401bbc4e64d1c6d36584766fa2079fe89abc91cd844f32dff669e0d5\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200386338038062003863833981016040819052620000349162000191565b82818162000042816200008f565b816200004e816200008f565b50506001600160a01b039182166080521660a052816200006e816200008f565b6001600160a01b03831660c05262000085620000ba565b50505050620001e5565b6001600160a01b038116620000b75760405163e6c4247b60e01b815260040160405180910390fd5b50565b600054610100900460ff1615620001275760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000179576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b0381168114620000b757600080fd5b600080600060608486031215620001a757600080fd5b8351620001b4816200017b565b6020850151909350620001c7816200017b565b6040850151909250620001da816200017b565b809150509250925092565b60805160a05160c05161362b62000238600039600081816107d1015281816108e20152818161098201528181610a620152610ac4015260006107450152600081816111d30152611315015261362b6000f3fe6080604052600436106101485760003560e01c806391d14854116100c0578063ca628c7811610074578063debcf1fe11610059578063debcf1fe146103e4578063e3ab224614610404578063fe4406ea1461042457600080fd5b8063ca628c7814610398578063d547741f146103c457600080fd5b8063a217fddf116100a5578063a217fddf14610343578063c5e4c9f914610358578063ca15c8731461037857600080fd5b806391d14854146102bd57806393867fb51461031057600080fd5b806336568abe1161011757806367d13dd3116100fc57806367d13dd3146102455780639010d07c1461026557806390fd50b3146102aa57600080fd5b806336568abe1461020957806354fd4d501461022957600080fd5b806301ffc9a7146101545780631c20fadd14610189578063248a9ca3146101ab5780632f2ff15d146101e957600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f366004612baa565b610468565b60405190151581526020015b60405180910390f35b34801561019557600080fd5b506101a96101a4366004612c0e565b6104c4565b005b3480156101b757600080fd5b506101db6101c6366004612c4f565b60009081526097602052604090206001015490565b604051908152602001610180565b3480156101f557600080fd5b506101a9610204366004612c68565b6105b5565b34801561021557600080fd5b506101a9610224366004612c68565b6105df565b34801561023557600080fd5b5060405160018152602001610180565b34801561025157600080fd5b506101a9610260366004612c98565b610697565b34801561027157600080fd5b50610285610280366004612cb5565b6106d4565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610180565b6101db6102b8366004612c4f565b6106f3565b3480156102c957600080fd5b506101746102d8366004612c68565b600091825260976020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561031c57600080fd5b507f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca0250966101db565b34801561034f57600080fd5b506101db600081565b34801561036457600080fd5b506101a9610373366004612ceb565b610be4565b34801561038457600080fd5b506101db610393366004612c4f565b610d79565b3480156103a457600080fd5b5061012d5473ffffffffffffffffffffffffffffffffffffffff16610285565b3480156103d057600080fd5b506101a96103df366004612c68565b610d90565b3480156103f057600080fd5b506101a96103ff366004612d2e565b610db5565b34801561041057600080fd5b506101a961041f366004612db3565b610e58565b34801561043057600080fd5b5061012d5474010000000000000000000000000000000000000000900463ffffffff1660405163ffffffff9091168152602001610180565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806104be57506104be82610e95565b92915050565b816104ce81610f2c565b6104f87f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610f7c565b610500610fe5565b81156105a65761052773ffffffffffffffffffffffffffffffffffffffff85168484611058565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc322efa58c9cb2c39cfffdac61d35c8643f5cbf13c6a7d0034de2cf18923aff38560405161059d91815260200190565b60405180910390a45b6105af60018055565b50505050565b6000828152609760205260409020600101546105d0816110b4565b6105da83836110be565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61069382826110e0565b5050565b6106c17f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610f7c565b806106cb81610f2c565b61069382611102565b600082815260c9602052604081206106ec90836111a2565b9392505050565b60006106fd610fe5565b610706826111ae565b91508160000361071857506000610bd6565b600061072383611389565b905060006040518060e0016040528061759563ffffffff16815260200161077d7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690565b815260200185815260200183815260200160405180602001604052806000815250815260200160405180602001604052806000815250815260200160405180602001604052806000815250815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630d35b415836040518263ffffffff1660e01b81526004016108289190612eb2565b600060405180830381865afa158015610845573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261088b9190810190613009565b925050506000816020015190506108a281856113c7565b6040517f3b6f743b00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633b6f743b906109199087908590600401613161565b6040805180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190613185565b8051909150610968348261140b565b600073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0f91906131a1565b73ffffffffffffffffffffffffffffffffffffffff1603610a3c576040850151610a3990826131ed565b90505b61012d546040860151610a879173ffffffffffffffffffffffffffffffffffffffff16907f000000000000000000000000000000000000000000000000000000000000000090611445565b6040517fcbef2aa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063cbef2aa9908390610aff90899087903390600401613200565b60006040518083038185885af1158015610b1d573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b6491908101906132c7565b508351909550610b7891503390349061156a565b61012d5460405189815273ffffffffffffffffffffffffffffffffffffffff9091169033907f913f1d1dff214ff34cd86dad2e6ccdd8a7dfe420e071ae5d59552f084f8c779e9060200160405180910390a350505060200151925050505b610bdf60018055565b919050565b600054610100900460ff1615808015610c045750600054600160ff909116105b80610c1e5750303b158015610c1e575060005460ff166001145b610caa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610680565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610d0857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610d12838361159c565b80156105da57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600081815260c9602052604081206104be90611645565b600082815260976020526040902060010154610dab816110b4565b6105da83836110e0565b60fb54600090610dca9061ffff166001613383565b90506001848015610de357508061ffff168261ffff1614155b15610e1a576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84610e23578091505b60fb80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff84161790555050505050565b610e827f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610f7c565b80610e8c8161164f565b61069382611692565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104be57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146104be565b73ffffffffffffffffffffffffffffffffffffffff8116610f79576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610693576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260015403611051576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610680565b6002600155565b8060000361106557505050565b61106e83611752565b15611093576105da73ffffffffffffffffffffffffffffffffffffffff831682611786565b6105da73ffffffffffffffffffffffffffffffffffffffff841683836118e0565b610f7981336119b4565b6110c88282611a6e565b600082815260c9602052604090206105da9082611b62565b6110ea8282611b84565b600082815260c9602052604090206105da9082611c3f565b61012d5473ffffffffffffffffffffffffffffffffffffffff908116908216810361112b575050565b61012d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84811691821790925560405190918316907f411abd5d3fa02a1e8bf54a40f19e646d3358a89c8a0cbd60537a603a2e3f2cb590600090a35050565b60006106ec8383611c61565b61012d5460009081906111f79073ffffffffffffffffffffffffffffffffffffffff167f0000000000000000000000000000000000000000000000000000000000000000611c8b565b90508060000361120a5750600092915050565b80831180611216575082155b1561121f578092505b60408051600180825281830190925260009160208083019080368337505061012d54825192935073ffffffffffffffffffffffffffffffffffffffff169183915060009061126f5761126f61339e565b73ffffffffffffffffffffffffffffffffffffffff929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905084816000815181106112cd576112cd61339e565b60209081029190910101526040517fa1a660a700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a1a660a79061134e908590309086906004016133cd565b600060405180830381600087803b15801561136857600080fd5b505af115801561137c573d6000803e3d6000fd5b5096979650505050505050565b61012d546000906113bd90839074010000000000000000000000000000000000000000900463ffffffff16620f4240611d4c565b6104be908361347b565b80821015610693576040517fa18f40750000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610680565b80821015610693576040517f9086bdc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114648373ffffffffffffffffffffffffffffffffffffffff16611752565b1561146e57505050565b600073ffffffffffffffffffffffffffffffffffffffff84166040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8581166024830152919091169063dd62ed3e90604401602060405180830381865afa1580156114fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151f919061348e565b9050818110156105af576105af73ffffffffffffffffffffffffffffffffffffffff8516847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611e40565b808211156105da576105da61157f828461347b565b73ffffffffffffffffffffffffffffffffffffffff851690611786565b600054610100900460ff16611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610680565b61163b611e74565b6106938282611f1d565b60006104be825490565b620c350063ffffffff82161115610f79576040517f334ee9a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012d5463ffffffff74010000000000000000000000000000000000000000909104811690821681036116c3575050565b61012d80547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8581169182029290921790925560408051918416825260208201929092527f75ea67ca0b7130eb73ed94d953e6c83e271a1743f35d3e8f96399e70ffdfcdf2910160405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146104be565b804710156117f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610680565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461184a576040519150601f19603f3d011682016040523d82523d6000602084013e61184f565b606091505b50509050806105da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610680565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105da9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261201d565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610693576119f48161212c565b6119ff83602061214b565b604051602001611a109291906134a7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261068091600401613528565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661069357600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611b043390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006106ec8373ffffffffffffffffffffffffffffffffffffffff841661238e565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561069357600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106ec8373ffffffffffffffffffffffffffffffffffffffff84166123dd565b6000826000018281548110611c7857611c7861339e565b9060005260206000200154905092915050565b6000611c9683611752565b15611cb9575073ffffffffffffffffffffffffffffffffffffffff8116316104be565b826040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291909116906370a0823190602401602060405180830381865afa158015611d28573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec919061348e565b6000806000611d5b86866124d7565b9150915081600003611d8057838181611d7657611d7661353b565b04925050506106ec565b838210611db9576040517f35278d1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611dc6878787612512565b9050600080611dd685858561252d565b9150915081600003611dfe57868181611df157611df161353b565b04955050505050506106ec565b6000878103881690611e1184848461255d565b90506000611e2d838b81611e2757611e2761353b565b0461259a565b919091029b9a5050505050505050505050565b611e4983611752565b15611e5357505050565b6105da73ffffffffffffffffffffffffffffffffffffffff841683836125bb565b600054610100900460ff16611f0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610680565b611f136126ab565b611f1b612742565b565b600054610100900460ff16611fb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610680565b61012d805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090921673ffffffffffffffffffffffffffffffffffffffff90931692909217179055565b600061207f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128589092919063ffffffff16565b90508051600014806120a05750808060200190518101906120a0919061356a565b6105da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610680565b60606104be73ffffffffffffffffffffffffffffffffffffffff831660145b6060600061215a836002613587565b6121659060026131ed565b67ffffffffffffffff81111561217d5761217d612ec5565b6040519080825280601f01601f1916602001820160405280156121a7576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106121de576121de61339e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122415761224161339e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061227d846002613587565b6122889060016131ed565b90505b6001811115612325577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106122c9576122c961339e565b1a60f81b8282815181106122df576122df61339e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361231e8161359e565b905061228b565b5083156106ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610680565b60008181526001830160205260408120546123d5575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104be565b5060006104be565b600081815260018301602052604081205480156124c657600061240160018361347b565b85549091506000906124159060019061347b565b905081811461247a5760008660000182815481106124355761243561339e565b90600052602060002001549050808760000184815481106124585761245861339e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061248b5761248b6135d3565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104be565b60009150506104be565b5092915050565b60008060006124e6858561286f565b90508484028082106124ff57908190039250905061250b565b60018183030393509150505b9250929050565b600081806125225761252261353b565b838509949350505050565b6000808284106125435750839050818303612555565b61254e60018661347b565b9150508183035b935093915050565b60008061257b83808303816125745761257461353b565b0460010190565b905082848161258c5761258c61353b565b048186021795945050505050565b60006001815b60088110156124d057838202600203820291506001016125a0565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052612647848261289c565b6105af5760405173ffffffffffffffffffffffffffffffffffffffff84166024820152600060448201526126a19085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611932565b6105af848261201d565b600054610100900460ff16611f1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610680565b600054610100900460ff166127d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610680565b60fb80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016600117905561282e7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca0250968061295d565b611f1b7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096336129a8565b606061286784846000856129b2565b949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8284099392505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff16846040516128c69190613602565b6000604051808303816000865af19150503d8060008114612903576040519150601f19603f3d011682016040523d82523d6000602084013e612908565b606091505b5091509150818015612932575080511580612932575080806020019051810190612932919061356a565b8015612954575073ffffffffffffffffffffffffffffffffffffffff85163b15155b95945050505050565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61069382826110be565b606082471015612a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610680565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612a6d9190613602565b60006040518083038185875af1925050503d8060008114612aaa576040519150601f19603f3d011682016040523d82523d6000602084013e612aaf565b606091505b5091509150612ac087838387612acb565b979650505050505050565b60608315612b61578251600003612b5a5773ffffffffffffffffffffffffffffffffffffffff85163b612b5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610680565b5081612867565b6128678383815115612b765781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106809190613528565b600060208284031215612bbc57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146106ec57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610f7957600080fd5b600080600060608486031215612c2357600080fd5b8335612c2e81612bec565b92506020840135612c3e81612bec565b929592945050506040919091013590565b600060208284031215612c6157600080fd5b5035919050565b60008060408385031215612c7b57600080fd5b823591506020830135612c8d81612bec565b809150509250929050565b600060208284031215612caa57600080fd5b81356106ec81612bec565b60008060408385031215612cc857600080fd5b50508035926020909101359150565b803563ffffffff81168114610bdf57600080fd5b60008060408385031215612cfe57600080fd5b8235612d0981612bec565b9150612d1760208401612cd7565b90509250929050565b8015158114610f7957600080fd5b600080600060408486031215612d4357600080fd5b8335612d4e81612d20565b9250602084013567ffffffffffffffff80821115612d6b57600080fd5b818601915086601f830112612d7f57600080fd5b813581811115612d8e57600080fd5b876020828501011115612da057600080fd5b6020830194508093505050509250925092565b600060208284031215612dc557600080fd5b6106ec82612cd7565b60005b83811015612de9578181015183820152602001612dd1565b50506000910152565b60008151808452612e0a816020860160208601612dce565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b63ffffffff81511682526020810151602083015260408101516040830152606081015160608301526000608082015160e06080850152612e7f60e0850182612df2565b905060a083015184820360a0860152612e988282612df2565b91505060c083015184820360c08601526129548282612df2565b6020815260006106ec6020830184612e3c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612f1757612f17612ec5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612f6457612f64612ec5565b604052919050565b600060408284031215612f7e57600080fd5b612f86612ef4565b9050815181526020820151602082015292915050565b600067ffffffffffffffff831115612fb657612fb6612ec5565b612fe760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601612f1d565b9050828152838383011115612ffb57600080fd5b6106ec836020830184612dce565b600080600060a0848603121561301e57600080fd5b6130288585612f6c565b9250604084015167ffffffffffffffff8082111561304557600080fd5b818601915086601f83011261305957600080fd5b815160208282111561306d5761306d612ec5565b8160051b61307c828201612f1d565b928352848101820192828101908b85111561309657600080fd5b83870192505b84831015613141578251868111156130b357600080fd5b87016040818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00112156130e757600080fd5b6130ef612ef4565b85820151815260408201518881111561310757600080fd5b8083019250508d603f83011261311c57600080fd5b61312d8e8784015160408501612f9c565b81870152835250918301919083019061309c565b809850505050505050506131588560608601612f6c565b90509250925092565b6040815260006131746040830185612e3c565b905082151560208301529392505050565b60006040828403121561319757600080fd5b6106ec8383612f6c565b6000602082840312156131b357600080fd5b81516106ec81612bec565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156104be576104be6131be565b6080815260006132136080830186612e3c565b9050835160208301526020840151604083015273ffffffffffffffffffffffffffffffffffffffff83166060830152949350505050565b60006040828403121561325c57600080fd5b613264612ef4565b9050815168ffffffffffffffffff8116811461327f57600080fd5b8152602082015167ffffffffffffffff81111561329b57600080fd5b8201601f810184136132ac57600080fd5b6132bb84825160208401612f9c565b60208301525092915050565b600080600083850360e08112156132dd57600080fd5b60808112156132eb57600080fd5b506040516060810167ffffffffffffffff828210818311171561331057613310612ec5565b816040528651835260208701519150808216821461332d57600080fd5b8160208401526133408860408901612f6c565b60408401528295506133558860808901612f6c565b945060c087015192508083111561336b57600080fd5b50506133798682870161324a565b9150509250925092565b61ffff8181168382160190808211156124d0576124d06131be565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b606080825284519082018190526000906020906080840190828801845b8281101561341c57815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016133ea565b50505073ffffffffffffffffffffffffffffffffffffffff861684830152838103604085015284518082528583019183019060005b8181101561346d57835183529284019291840191600101613451565b509098975050505050505050565b818103818111156104be576104be6131be565b6000602082840312156134a057600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516134df816017850160208801612dce565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161351c816028840160208801612dce565b01602801949350505050565b6020815260006106ec6020830184612df2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006020828403121561357c57600080fd5b81516106ec81612d20565b80820281158282048414176104be576104be6131be565b6000816135ad576135ad6131be565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008251613614818460208701612dce565b919091019291505056fea164736f6c6343000813000a",
  "deployedBytecode": "0x6080604052600436106101485760003560e01c806391d14854116100c0578063ca628c7811610074578063debcf1fe11610059578063debcf1fe146103e4578063e3ab224614610404578063fe4406ea1461042457600080fd5b8063ca628c7814610398578063d547741f146103c457600080fd5b8063a217fddf116100a5578063a217fddf14610343578063c5e4c9f914610358578063ca15c8731461037857600080fd5b806391d14854146102bd57806393867fb51461031057600080fd5b806336568abe1161011757806367d13dd3116100fc57806367d13dd3146102455780639010d07c1461026557806390fd50b3146102aa57600080fd5b806336568abe1461020957806354fd4d501461022957600080fd5b806301ffc9a7146101545780631c20fadd14610189578063248a9ca3146101ab5780632f2ff15d146101e957600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f366004612baa565b610468565b60405190151581526020015b60405180910390f35b34801561019557600080fd5b506101a96101a4366004612c0e565b6104c4565b005b3480156101b757600080fd5b506101db6101c6366004612c4f565b60009081526097602052604090206001015490565b604051908152602001610180565b3480156101f557600080fd5b506101a9610204366004612c68565b6105b5565b34801561021557600080fd5b506101a9610224366004612c68565b6105df565b34801561023557600080fd5b5060405160018152602001610180565b34801561025157600080fd5b506101a9610260366004612c98565b610697565b34801561027157600080fd5b50610285610280366004612cb5565b6106d4565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610180565b6101db6102b8366004612c4f565b6106f3565b3480156102c957600080fd5b506101746102d8366004612c68565b600091825260976020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561031c57600080fd5b507f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca0250966101db565b34801561034f57600080fd5b506101db600081565b34801561036457600080fd5b506101a9610373366004612ceb565b610be4565b34801561038457600080fd5b506101db610393366004612c4f565b610d79565b3480156103a457600080fd5b5061012d5473ffffffffffffffffffffffffffffffffffffffff16610285565b3480156103d057600080fd5b506101a96103df366004612c68565b610d90565b3480156103f057600080fd5b506101a96103ff366004612d2e565b610db5565b34801561041057600080fd5b506101a961041f366004612db3565b610e58565b34801561043057600080fd5b5061012d5474010000000000000000000000000000000000000000900463ffffffff1660405163ffffffff9091168152602001610180565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806104be57506104be82610e95565b92915050565b816104ce81610f2c565b6104f87f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610f7c565b610500610fe5565b81156105a65761052773ffffffffffffffffffffffffffffffffffffffff85168484611058565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc322efa58c9cb2c39cfffdac61d35c8643f5cbf13c6a7d0034de2cf18923aff38560405161059d91815260200190565b60405180910390a45b6105af60018055565b50505050565b6000828152609760205260409020600101546105d0816110b4565b6105da83836110be565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61069382826110e0565b5050565b6106c17f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610f7c565b806106cb81610f2c565b61069382611102565b600082815260c9602052604081206106ec90836111a2565b9392505050565b60006106fd610fe5565b610706826111ae565b91508160000361071857506000610bd6565b600061072383611389565b905060006040518060e0016040528061759563ffffffff16815260200161077d7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690565b815260200185815260200183815260200160405180602001604052806000815250815260200160405180602001604052806000815250815260200160405180602001604052806000815250815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630d35b415836040518263ffffffff1660e01b81526004016108289190612eb2565b600060405180830381865afa158015610845573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261088b9190810190613009565b925050506000816020015190506108a281856113c7565b6040517f3b6f743b00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633b6f743b906109199087908590600401613161565b6040805180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190613185565b8051909150610968348261140b565b600073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0f91906131a1565b73ffffffffffffffffffffffffffffffffffffffff1603610a3c576040850151610a3990826131ed565b90505b61012d546040860151610a879173ffffffffffffffffffffffffffffffffffffffff16907f000000000000000000000000000000000000000000000000000000000000000090611445565b6040517fcbef2aa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063cbef2aa9908390610aff90899087903390600401613200565b60006040518083038185885af1158015610b1d573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b6491908101906132c7565b508351909550610b7891503390349061156a565b61012d5460405189815273ffffffffffffffffffffffffffffffffffffffff9091169033907f913f1d1dff214ff34cd86dad2e6ccdd8a7dfe420e071ae5d59552f084f8c779e9060200160405180910390a350505060200151925050505b610bdf60018055565b919050565b600054610100900460ff1615808015610c045750600054600160ff909116105b80610c1e5750303b158015610c1e575060005460ff166001145b610caa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610680565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610d0857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610d12838361159c565b80156105da57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600081815260c9602052604081206104be90611645565b600082815260976020526040902060010154610dab816110b4565b6105da83836110e0565b60fb54600090610dca9061ffff166001613383565b90506001848015610de357508061ffff168261ffff1614155b15610e1a576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84610e23578091505b60fb80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff84161790555050505050565b610e827f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610f7c565b80610e8c8161164f565b61069382611692565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104be57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146104be565b73ffffffffffffffffffffffffffffffffffffffff8116610f79576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610693576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260015403611051576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610680565b6002600155565b8060000361106557505050565b61106e83611752565b15611093576105da73ffffffffffffffffffffffffffffffffffffffff831682611786565b6105da73ffffffffffffffffffffffffffffffffffffffff841683836118e0565b610f7981336119b4565b6110c88282611a6e565b600082815260c9602052604090206105da9082611b62565b6110ea8282611b84565b600082815260c9602052604090206105da9082611c3f565b61012d5473ffffffffffffffffffffffffffffffffffffffff908116908216810361112b575050565b61012d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84811691821790925560405190918316907f411abd5d3fa02a1e8bf54a40f19e646d3358a89c8a0cbd60537a603a2e3f2cb590600090a35050565b60006106ec8383611c61565b61012d5460009081906111f79073ffffffffffffffffffffffffffffffffffffffff167f0000000000000000000000000000000000000000000000000000000000000000611c8b565b90508060000361120a5750600092915050565b80831180611216575082155b1561121f578092505b60408051600180825281830190925260009160208083019080368337505061012d54825192935073ffffffffffffffffffffffffffffffffffffffff169183915060009061126f5761126f61339e565b73ffffffffffffffffffffffffffffffffffffffff929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905084816000815181106112cd576112cd61339e565b60209081029190910101526040517fa1a660a700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a1a660a79061134e908590309086906004016133cd565b600060405180830381600087803b15801561136857600080fd5b505af115801561137c573d6000803e3d6000fd5b5096979650505050505050565b61012d546000906113bd90839074010000000000000000000000000000000000000000900463ffffffff16620f4240611d4c565b6104be908361347b565b80821015610693576040517fa18f40750000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610680565b80821015610693576040517f9086bdc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114648373ffffffffffffffffffffffffffffffffffffffff16611752565b1561146e57505050565b600073ffffffffffffffffffffffffffffffffffffffff84166040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8581166024830152919091169063dd62ed3e90604401602060405180830381865afa1580156114fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151f919061348e565b9050818110156105af576105af73ffffffffffffffffffffffffffffffffffffffff8516847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611e40565b808211156105da576105da61157f828461347b565b73ffffffffffffffffffffffffffffffffffffffff851690611786565b600054610100900460ff16611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610680565b61163b611e74565b6106938282611f1d565b60006104be825490565b620c350063ffffffff82161115610f79576040517f334ee9a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012d5463ffffffff74010000000000000000000000000000000000000000909104811690821681036116c3575050565b61012d80547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8581169182029290921790925560408051918416825260208201929092527f75ea67ca0b7130eb73ed94d953e6c83e271a1743f35d3e8f96399e70ffdfcdf2910160405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146104be565b804710156117f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610680565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461184a576040519150601f19603f3d011682016040523d82523d6000602084013e61184f565b606091505b50509050806105da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610680565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105da9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261201d565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610693576119f48161212c565b6119ff83602061214b565b604051602001611a109291906134a7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261068091600401613528565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661069357600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611b043390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006106ec8373ffffffffffffffffffffffffffffffffffffffff841661238e565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561069357600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106ec8373ffffffffffffffffffffffffffffffffffffffff84166123dd565b6000826000018281548110611c7857611c7861339e565b9060005260206000200154905092915050565b6000611c9683611752565b15611cb9575073ffffffffffffffffffffffffffffffffffffffff8116316104be565b826040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291909116906370a0823190602401602060405180830381865afa158015611d28573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec919061348e565b6000806000611d5b86866124d7565b9150915081600003611d8057838181611d7657611d7661353b565b04925050506106ec565b838210611db9576040517f35278d1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611dc6878787612512565b9050600080611dd685858561252d565b9150915081600003611dfe57868181611df157611df161353b565b04955050505050506106ec565b6000878103881690611e1184848461255d565b90506000611e2d838b81611e2757611e2761353b565b0461259a565b919091029b9a5050505050505050505050565b611e4983611752565b15611e5357505050565b6105da73ffffffffffffffffffffffffffffffffffffffff841683836125bb565b600054610100900460ff16611f0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610680565b611f136126ab565b611f1b612742565b565b600054610100900460ff16611fb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610680565b61012d805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090921673ffffffffffffffffffffffffffffffffffffffff90931692909217179055565b600061207f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128589092919063ffffffff16565b90508051600014806120a05750808060200190518101906120a0919061356a565b6105da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610680565b60606104be73ffffffffffffffffffffffffffffffffffffffff831660145b6060600061215a836002613587565b6121659060026131ed565b67ffffffffffffffff81111561217d5761217d612ec5565b6040519080825280601f01601f1916602001820160405280156121a7576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106121de576121de61339e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122415761224161339e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061227d846002613587565b6122889060016131ed565b90505b6001811115612325577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106122c9576122c961339e565b1a60f81b8282815181106122df576122df61339e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361231e8161359e565b905061228b565b5083156106ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610680565b60008181526001830160205260408120546123d5575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104be565b5060006104be565b600081815260018301602052604081205480156124c657600061240160018361347b565b85549091506000906124159060019061347b565b905081811461247a5760008660000182815481106124355761243561339e565b90600052602060002001549050808760000184815481106124585761245861339e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061248b5761248b6135d3565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104be565b60009150506104be565b5092915050565b60008060006124e6858561286f565b90508484028082106124ff57908190039250905061250b565b60018183030393509150505b9250929050565b600081806125225761252261353b565b838509949350505050565b6000808284106125435750839050818303612555565b61254e60018661347b565b9150508183035b935093915050565b60008061257b83808303816125745761257461353b565b0460010190565b905082848161258c5761258c61353b565b048186021795945050505050565b60006001815b60088110156124d057838202600203820291506001016125a0565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052612647848261289c565b6105af5760405173ffffffffffffffffffffffffffffffffffffffff84166024820152600060448201526126a19085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611932565b6105af848261201d565b600054610100900460ff16611f1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610680565b600054610100900460ff166127d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610680565b60fb80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016600117905561282e7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca0250968061295d565b611f1b7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096336129a8565b606061286784846000856129b2565b949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8284099392505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff16846040516128c69190613602565b6000604051808303816000865af19150503d8060008114612903576040519150601f19603f3d011682016040523d82523d6000602084013e612908565b606091505b5091509150818015612932575080511580612932575080806020019051810190612932919061356a565b8015612954575073ffffffffffffffffffffffffffffffffffffffff85163b15155b95945050505050565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61069382826110be565b606082471015612a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610680565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612a6d9190613602565b60006040518083038185875af1925050503d8060008114612aaa576040519150601f19603f3d011682016040523d82523d6000602084013e612aaf565b606091505b5091509150612ac087838387612acb565b979650505050505050565b60608315612b61578251600003612b5a5773ffffffffffffffffffffffffffffffffffffffff85163b612b5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610680565b5081612867565b6128678383815115612b765781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106809190613528565b600060208284031215612bbc57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146106ec57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610f7957600080fd5b600080600060608486031215612c2357600080fd5b8335612c2e81612bec565b92506020840135612c3e81612bec565b929592945050506040919091013590565b600060208284031215612c6157600080fd5b5035919050565b60008060408385031215612c7b57600080fd5b823591506020830135612c8d81612bec565b809150509250929050565b600060208284031215612caa57600080fd5b81356106ec81612bec565b60008060408385031215612cc857600080fd5b50508035926020909101359150565b803563ffffffff81168114610bdf57600080fd5b60008060408385031215612cfe57600080fd5b8235612d0981612bec565b9150612d1760208401612cd7565b90509250929050565b8015158114610f7957600080fd5b600080600060408486031215612d4357600080fd5b8335612d4e81612d20565b9250602084013567ffffffffffffffff80821115612d6b57600080fd5b818601915086601f830112612d7f57600080fd5b813581811115612d8e57600080fd5b876020828501011115612da057600080fd5b6020830194508093505050509250925092565b600060208284031215612dc557600080fd5b6106ec82612cd7565b60005b83811015612de9578181015183820152602001612dd1565b50506000910152565b60008151808452612e0a816020860160208601612dce565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b63ffffffff81511682526020810151602083015260408101516040830152606081015160608301526000608082015160e06080850152612e7f60e0850182612df2565b905060a083015184820360a0860152612e988282612df2565b91505060c083015184820360c08601526129548282612df2565b6020815260006106ec6020830184612e3c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612f1757612f17612ec5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612f6457612f64612ec5565b604052919050565b600060408284031215612f7e57600080fd5b612f86612ef4565b9050815181526020820151602082015292915050565b600067ffffffffffffffff831115612fb657612fb6612ec5565b612fe760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601612f1d565b9050828152838383011115612ffb57600080fd5b6106ec836020830184612dce565b600080600060a0848603121561301e57600080fd5b6130288585612f6c565b9250604084015167ffffffffffffffff8082111561304557600080fd5b818601915086601f83011261305957600080fd5b815160208282111561306d5761306d612ec5565b8160051b61307c828201612f1d565b928352848101820192828101908b85111561309657600080fd5b83870192505b84831015613141578251868111156130b357600080fd5b87016040818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00112156130e757600080fd5b6130ef612ef4565b85820151815260408201518881111561310757600080fd5b8083019250508d603f83011261311c57600080fd5b61312d8e8784015160408501612f9c565b81870152835250918301919083019061309c565b809850505050505050506131588560608601612f6c565b90509250925092565b6040815260006131746040830185612e3c565b905082151560208301529392505050565b60006040828403121561319757600080fd5b6106ec8383612f6c565b6000602082840312156131b357600080fd5b81516106ec81612bec565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156104be576104be6131be565b6080815260006132136080830186612e3c565b9050835160208301526020840151604083015273ffffffffffffffffffffffffffffffffffffffff83166060830152949350505050565b60006040828403121561325c57600080fd5b613264612ef4565b9050815168ffffffffffffffffff8116811461327f57600080fd5b8152602082015167ffffffffffffffff81111561329b57600080fd5b8201601f810184136132ac57600080fd5b6132bb84825160208401612f9c565b60208301525092915050565b600080600083850360e08112156132dd57600080fd5b60808112156132eb57600080fd5b506040516060810167ffffffffffffffff828210818311171561331057613310612ec5565b816040528651835260208701519150808216821461332d57600080fd5b8160208401526133408860408901612f6c565b60408401528295506133558860808901612f6c565b945060c087015192508083111561336b57600080fd5b50506133798682870161324a565b9150509250925092565b61ffff8181168382160190808211156124d0576124d06131be565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b606080825284519082018190526000906020906080840190828801845b8281101561341c57815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016133ea565b50505073ffffffffffffffffffffffffffffffffffffffff861684830152838103604085015284518082528583019183019060005b8181101561346d57835183529284019291840191600101613451565b509098975050505050505050565b818103818111156104be576104be6131be565b6000602082840312156134a057600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516134df816017850160208801612dce565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161351c816028840160208801612dce565b01602801949350505050565b6020815260006106ec6020830184612df2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006020828403121561357c57600080fd5b81516106ec81612d20565b80820281158282048414176104be576104be6131be565b6000816135ad576135ad6131be565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008251613614818460208701612dce565b919091019291505056fea164736f6c6343000813000a",
  "devdoc": {
    "details": "VortexStargateBridge contract",
    "events": {
      "FundsWithdrawn(address,address,address,uint256)": {
        "details": "triggered when tokens have been withdrawn from the carbon vortex bridge"
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "SlippagePPMUpdated(uint32,uint32)": {
        "details": "emitted when the slippage (in units of PPM) is updated"
      },
      "TokensBridged(address,address,uint256)": {
        "details": "emitted when tokens are bridged successfully"
      },
      "WithdrawTokenUpdated(address,address)": {
        "details": "emitted when the withdraw token is updated"
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "used to set immutable state variables and disable initialization of the implementation"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,uint32)": {
        "details": "initializes the contract"
      },
      "postUpgrade(bool,bytes)": {
        "details": "performs post-upgrade initialization requirements: - this must and can be called only once per-upgrade"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "roleAdmin()": {
        "details": "returns the admin role"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bridge(uint256)": {
        "notice": "function which bridges the target / final target tokens accumulated in the vortex to the mainnet vaultif amount == 0, the entire available balance is bridged"
      },
      "setSlippagePPM(uint32)": {
        "notice": "sets the maximum allowed bridge slippage (in units of PPM) requirements: - the caller must be the admin of the contract"
      },
      "setWithdrawToken(address)": {
        "notice": "sets the withdraw token requirements: - the caller must be the admin of the contract"
      },
      "slippagePPM()": {
        "notice": "returns the maximum allowed bridge slippage (in units of PPM)"
      },
      "version()": {
        "notice": "returns the version of the contract"
      },
      "withdrawFunds(address,address,uint256)": {
        "notice": "withdraws funds held by the contract and sends them to an accountnote that this is a safety mechanism, shouldn't be necessary in normal operation requirements: - the caller is admin of the contract"
      },
      "withdrawToken()": {
        "notice": "returns the configured withdraw token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 917,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 920,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1094,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1163,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1544,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1818,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 504,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)499_storage)"
      },
      {
        "astId": 811,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 352,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3128_storage)"
      },
      {
        "astId": 474,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12979,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "_initializations",
        "offset": 0,
        "slot": "251",
        "type": "t_uint16"
      },
      {
        "astId": 12985,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8513,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "_withdrawToken",
        "offset": 0,
        "slot": "301",
        "type": "t_userDefinedValueType(Token)12109"
      },
      {
        "astId": 8515,
        "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
        "label": "_slippagePPM",
        "offset": 20,
        "slot": "301",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3128_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3128_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)499_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)499_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3128_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 3127,
            "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2813_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)499_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 496,
            "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 498,
            "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2813_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2808,
            "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2812,
            "contract": "contracts/bridge/VortexStargateBridge.sol:VortexStargateBridge",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(Token)12109": {
        "encoding": "inplace",
        "label": "Token",
        "numberOfBytes": "20"
      }
    }
  }
}